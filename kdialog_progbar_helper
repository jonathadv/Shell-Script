#!/usr/bin/env bash
#
# Name: Kdialog Progress bar Helper
# Author: Jonatha Daguerre Vasconcelos <jonatha@daguerre.com.br>
# Version: 1.2 (14 Jun 2017)
# License: MIT
#
#                  DESCRIPTION
#
# This script helps to create and use KDialog progress bar with d-bus.
#
#
# Usage:
#   source ./kdialog_progbar_helper
#
#
#              CHANGE HISTORY
#
# 1.2 (14 Jun 2017) - Updated comments and license; improved comments.
# 1.1 (05 Out 2016) - Code style
# 1.0 (27 Aug 2014) - First version
#



#
# Create progress bar dialog
# Params:
#  Title
#  Message
#
# Returns:
#  The d-bus reference for the dialog box.
progress_bar_create(){
    
    local title="$1"
    local message="$2"
    local has_cancel_button="$3"
    
    [[ -z "${has_cancel_button}" ]] && has_cancel_button="false"
    
    if [[ -z "${title}" || -z "${message}" ]]; then
        
        printf "\n"
        printf "Missing parameters! Try:\n"
        printf "progress_bar_create <title> <message>\n"
        printf "\n"
        
        return 1
    fi
    
    
    PROGRESS_INSTANCE=$(kdialog --title "$title" --progressbar "$message")
    
    if "${has_cancel_button}"; then
        qdbus $PROGRESS_INSTANCE showCancelButton true
    fi
    
    printf '%s' "${PROGRESS_INSTANCE}"
    
}


#
# Update progress bar dialog
# Params:
#  Progress bar d-bus reference
#  Percentage (a integer number between 0 and 100)
#
progress_bar_update(){

    local progress_dialog_instance="${1}"
    local percentage="${2}"
    
    if [[ -z "${progress_dialog_instance}" || -z "${percentage}" ]]; then
        
        printf '%s' "\nMissing parameters! Try:\nprogress_bar_create <dialog instance> <percentage>\n\n"
        
        return 1
    fi
    
    
    qdbus ${progress_dialog_instance} Set org.kde.kdialog.ProgressDialog value "${percentage}"
       
}


#
# Finished the progress bar and close the window
# Params:
#  Progress bar d-bus reference
#
progress_bar_finish(){
    
    local progress_dialog_instance="$1"
    
    if [[ -z "${progress_dialog_instance}" ]]; then
        
        printf "\nMissing parameters! Try:\nprogress_bar_create <dialog instance>\n\n"
        
        return 1
    fi

    qdbus ${progress_dialog_instance} org.kde.kdialog.ProgressDialog.setLabelText 'Finished'
    sleep 3
    qdbus ${progress_dialog_instance} org.kde.kdialog.ProgressDialog.close


}


#
# Check if the "cancel" button was pressed
# Params:
#  Progress bar d-bus reference
#
progress_bar_was_canceled(){

    local progress_dialog_instance="${@}"
    
    if [[ -z "${progress_dialog_instance}" ]]; then
        
        printf "\nMissing parameters! Try:\nprogress_bar_create <dialog instance>\n\n"
        
        return 1
    fi

    qdbus ${progress_dialog_instance} wasCancelled

}


#
# Close the dialog box
# Params:
#  Progress bar d-bus reference
#
progress_bar_exit(){
    
    local progress_dialog_instance="${@}"
    
    if [[ -z "${progress_dialog_instance}" ]]; then
        
        printf "\nMissing parameters! Try:\nprogress_bar_create <dialog instance>\n\n"
        
        return 1
    fi
   
    qdbus ${progress_dialog_instance} org.kde.kdialog.ProgressDialog.close


}


#
# Show a simple help text
#
kdialog_progbar_help(){

printf "\n====== H E L P ======\n"
    
    printf "Creating the dialog with cancel button\n"
    printf "progress_bar_create \"Teste1\" \"Test1\" true"
    
    printf "\n\nUpdating bar to 20...\n"
    printf "progress_bar_update \"\${instance}\" 20"
    
    printf "\n\nChecking if it was canceled...\n"
    printf "progress_bar_was_canceled \${instance}"
     
    printf "\n\nExiting...\n"
    printf "progress_bar_exit \${inst}"
    

    printf "\n\n====================\n"

}


# Run tests
test01(){
    
    printf "\n====== T E S T ======\n"
    
    printf "__Creating the dialog with cancel button...\n"
    inst=$(progress_bar_create "Teste1" "Test1" true)
    
    printf "__Updating bar to 20...\n"
    progress_bar_update "${inst}" 20
    sleep 5
    
    printf "__Checking if it was canceled...\n"
    progress_bar_was_canceled "${inst}"
    sleep 5
    
    printf "__Checking if it was canceled again...\n"
    progress_bar_was_canceled "${inst}"
    sleep 5
    
    printf "__Exiting...\n"
    progress_bar_exit "${inst}"
    

    printf "====================\n"   

}

